# -*- coding: utf-8 -*- 

#########################################################################
## This is a samples controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################  

def index():
    import os
    import re
    import commands
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html
    """
    out=None
    inp=None
    out_mod=None
    form=SQLFORM(db.programs)
    if(form.accepts(request.vars,session)):
         path=os.getcwd()
         path=path+'/applications/vlab/uploads/'+form.vars.file
         inp=commands.getstatusoutput('cc '+path)
         command='valgrind --tool=cachegrind --I1='+str(form.vars.i1_size)+','+str(form.vars.i1_associativity)+','+str(form.vars.i1_line_size)+' ./a.out'
         if form.vars.input_file !=NULL:
             input_path=os.getcwd()
             input_path=input_path+'/applications/vlab/uploads/'+form.vars.input_file
             command=command+'<'+input_path
         out=commands.getstatusoutput(command)
         out_mod=re.split('\n',out[1])
    response.flash = T('Welcome to web2py')
    return dict(form=form,message=T('Hello World'),out=out_mod,inp=inp)

def customize():
    form=SQLFORM(db.options)
    
def user():
    """
    exposes:
    http://..../[app]/default/user/login 
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())


def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request,db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    session.forget()
    return service()
